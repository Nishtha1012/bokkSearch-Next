import Head from "next/head";
import React, { useEffect, useState } from "react";
import client from "../gql/apolloclient";
import _ from "lodash";
import { GET_ALL_BOOKS, GET_BOOKS_BY_FILTER } from "../gql/queries";
import BookCard from "../components/BookCard";
import Paginate from "../components/Paginate";
import Filter from "../components/filter";
import BackToTop from "../components/BackToTop";
import ClearFilter from "../components/ClearFilter.js.js";
import SearchBar from "../components/SearchBar";
import useHome from "../hooks/useHome";
import { CircularProgress } from "@mui/material";
const home = ({ books }) => {
  const {
    status,
    onSubmit,
    handleChange,
    index,
    router,
    showFilters,
    filters,
    handleFilterChange,
    setshowFilters,
    isFilter,
    clearfilter,
  } = useHome();
  if (status === "unauthenticated") {
    router.push("/login");
  }

  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const start = () => {
      console.log("start");
      setLoading(true);
    };
    const end = () => {
      console.log("finished");
      setLoading(false);
    };
    router.events.on("routeChangeStart", start);
    router.events.on("routeChangeError", end);
    router.events.on("routeChangeComplete", end);
    return () => {
      router.events.off("routeChangeStart", start);
      router.events.off("routeChangeComplete", end);
      router.events.off("routeChangeError", end);
    };
  }, []);
  return (
    <>
      <Head>
        <title>Books | Search</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <SearchBar onSubmit={onSubmit} />

      {_.size(books) > 0 ? (
        <>
          <div className="mt-3 flex">
            <div>
              <Filter
                showFilters={showFilters}
                filters={filters}
                handleFilterChange={handleFilterChange}
                setshowFilters={setshowFilters}
              />
            </div>
            {isFilter && <ClearFilter clearfilter={clearfilter} />}
          </div>

          <div className="grid grid-cols-4 mx-5 max-md:grid-cols-2 max-sm:grid-cols-1">
            {books.map((book, index) => (
              <BookCard book={book} key={index} loading={loading} />
            ))}
          </div>

          <div className="mx-auto">
            <Paginate page={parseInt(index)} handleChange={handleChange} />
          </div>

          <BackToTop />
        </>
      ) : loading ? (
        <div className="mx-auto text-center flex justify-center items-center">
          <CircularProgress className="mx-auto" />
        </div>
      ) : (
        <h3 className="text-center mt-5">No Books Found...</h3>
      )}
    </>
  );
};

export default home;

export async function getServerSideProps(context) {
  const { query } = context;
  console.log(query);
  if (_.size(query) > 0) {
    try {
      if (query.filter) {
        const { data } = await client.query({
          query: GET_BOOKS_BY_FILTER,
          variables: {
            term: query.term ? query.term : "",
            start: parseInt(
              query.index === 1 ? query.index : (query.index - 1) * 10
            ),
            filter: query.filter ? query.filter : "",
          },
        });
        return {
          props: {
            books: data.booksByFilter,
          },
        };
      } else {
        const { data } = await client.query({
          query: GET_ALL_BOOKS,
          variables: {
            term: query.term ? query.term : "",
            start: parseInt(
              query.index === 1 ? query.index : (query.index - 1) * 10
            ),
          },
        });
        return {
          props: {
            books: data.searchBooks,
          },
        };
      }
    } catch (error) {
      return {
        props: {
          books: null,
        },
      };
    }
  } else {
    return {
      props: {
        books: null,
      },
    };
  }
}
